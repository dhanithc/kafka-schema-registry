/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.dc.kafka.avro.btlnse;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Audit extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7047220758249325730L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Audit\",\"namespace\":\"com.dc.kafka.avro.btlnse\",\"fields\":[{\"name\":\"companyId\",\"type\":\"string\"},{\"name\":\"eventCreationTime\",\"type\":\"string\"},{\"name\":\"inputterList\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"eventId\",\"type\":\"string\"},{\"name\":\"dateTimeList\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Audit> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Audit> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Audit> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Audit> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Audit> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Audit to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Audit from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Audit instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Audit fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence companyId;
  private java.lang.CharSequence eventCreationTime;
  private java.util.List<java.lang.CharSequence> inputterList;
  private java.lang.CharSequence eventId;
  private java.util.List<java.lang.CharSequence> dateTimeList;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Audit() {}

  /**
   * All-args constructor.
   * @param companyId The new value for companyId
   * @param eventCreationTime The new value for eventCreationTime
   * @param inputterList The new value for inputterList
   * @param eventId The new value for eventId
   * @param dateTimeList The new value for dateTimeList
   */
  public Audit(java.lang.CharSequence companyId, java.lang.CharSequence eventCreationTime, java.util.List<java.lang.CharSequence> inputterList, java.lang.CharSequence eventId, java.util.List<java.lang.CharSequence> dateTimeList) {
    this.companyId = companyId;
    this.eventCreationTime = eventCreationTime;
    this.inputterList = inputterList;
    this.eventId = eventId;
    this.dateTimeList = dateTimeList;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return companyId;
    case 1: return eventCreationTime;
    case 2: return inputterList;
    case 3: return eventId;
    case 4: return dateTimeList;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: companyId = (java.lang.CharSequence)value$; break;
    case 1: eventCreationTime = (java.lang.CharSequence)value$; break;
    case 2: inputterList = (java.util.List<java.lang.CharSequence>)value$; break;
    case 3: eventId = (java.lang.CharSequence)value$; break;
    case 4: dateTimeList = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'companyId' field.
   * @return The value of the 'companyId' field.
   */
  public java.lang.CharSequence getCompanyId() {
    return companyId;
  }


  /**
   * Sets the value of the 'companyId' field.
   * @param value the value to set.
   */
  public void setCompanyId(java.lang.CharSequence value) {
    this.companyId = value;
  }

  /**
   * Gets the value of the 'eventCreationTime' field.
   * @return The value of the 'eventCreationTime' field.
   */
  public java.lang.CharSequence getEventCreationTime() {
    return eventCreationTime;
  }


  /**
   * Sets the value of the 'eventCreationTime' field.
   * @param value the value to set.
   */
  public void setEventCreationTime(java.lang.CharSequence value) {
    this.eventCreationTime = value;
  }

  /**
   * Gets the value of the 'inputterList' field.
   * @return The value of the 'inputterList' field.
   */
  public java.util.List<java.lang.CharSequence> getInputterList() {
    return inputterList;
  }


  /**
   * Sets the value of the 'inputterList' field.
   * @param value the value to set.
   */
  public void setInputterList(java.util.List<java.lang.CharSequence> value) {
    this.inputterList = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.CharSequence getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'dateTimeList' field.
   * @return The value of the 'dateTimeList' field.
   */
  public java.util.List<java.lang.CharSequence> getDateTimeList() {
    return dateTimeList;
  }


  /**
   * Sets the value of the 'dateTimeList' field.
   * @param value the value to set.
   */
  public void setDateTimeList(java.util.List<java.lang.CharSequence> value) {
    this.dateTimeList = value;
  }

  /**
   * Creates a new Audit RecordBuilder.
   * @return A new Audit RecordBuilder
   */
  public static com.dc.kafka.avro.btlnse.Audit.Builder newBuilder() {
    return new com.dc.kafka.avro.btlnse.Audit.Builder();
  }

  /**
   * Creates a new Audit RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Audit RecordBuilder
   */
  public static com.dc.kafka.avro.btlnse.Audit.Builder newBuilder(com.dc.kafka.avro.btlnse.Audit.Builder other) {
    if (other == null) {
      return new com.dc.kafka.avro.btlnse.Audit.Builder();
    } else {
      return new com.dc.kafka.avro.btlnse.Audit.Builder(other);
    }
  }

  /**
   * Creates a new Audit RecordBuilder by copying an existing Audit instance.
   * @param other The existing instance to copy.
   * @return A new Audit RecordBuilder
   */
  public static com.dc.kafka.avro.btlnse.Audit.Builder newBuilder(com.dc.kafka.avro.btlnse.Audit other) {
    if (other == null) {
      return new com.dc.kafka.avro.btlnse.Audit.Builder();
    } else {
      return new com.dc.kafka.avro.btlnse.Audit.Builder(other);
    }
  }

  /**
   * RecordBuilder for Audit instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Audit>
    implements org.apache.avro.data.RecordBuilder<Audit> {

    private java.lang.CharSequence companyId;
    private java.lang.CharSequence eventCreationTime;
    private java.util.List<java.lang.CharSequence> inputterList;
    private java.lang.CharSequence eventId;
    private java.util.List<java.lang.CharSequence> dateTimeList;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.dc.kafka.avro.btlnse.Audit.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.companyId)) {
        this.companyId = data().deepCopy(fields()[0].schema(), other.companyId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventCreationTime)) {
        this.eventCreationTime = data().deepCopy(fields()[1].schema(), other.eventCreationTime);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.inputterList)) {
        this.inputterList = data().deepCopy(fields()[2].schema(), other.inputterList);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.eventId)) {
        this.eventId = data().deepCopy(fields()[3].schema(), other.eventId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dateTimeList)) {
        this.dateTimeList = data().deepCopy(fields()[4].schema(), other.dateTimeList);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Audit instance
     * @param other The existing instance to copy.
     */
    private Builder(com.dc.kafka.avro.btlnse.Audit other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.companyId)) {
        this.companyId = data().deepCopy(fields()[0].schema(), other.companyId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventCreationTime)) {
        this.eventCreationTime = data().deepCopy(fields()[1].schema(), other.eventCreationTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.inputterList)) {
        this.inputterList = data().deepCopy(fields()[2].schema(), other.inputterList);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventId)) {
        this.eventId = data().deepCopy(fields()[3].schema(), other.eventId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dateTimeList)) {
        this.dateTimeList = data().deepCopy(fields()[4].schema(), other.dateTimeList);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'companyId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCompanyId() {
      return companyId;
    }


    /**
      * Sets the value of the 'companyId' field.
      * @param value The value of 'companyId'.
      * @return This builder.
      */
    public com.dc.kafka.avro.btlnse.Audit.Builder setCompanyId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.companyId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'companyId' field has been set.
      * @return True if the 'companyId' field has been set, false otherwise.
      */
    public boolean hasCompanyId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'companyId' field.
      * @return This builder.
      */
    public com.dc.kafka.avro.btlnse.Audit.Builder clearCompanyId() {
      companyId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventCreationTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventCreationTime() {
      return eventCreationTime;
    }


    /**
      * Sets the value of the 'eventCreationTime' field.
      * @param value The value of 'eventCreationTime'.
      * @return This builder.
      */
    public com.dc.kafka.avro.btlnse.Audit.Builder setEventCreationTime(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.eventCreationTime = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventCreationTime' field has been set.
      * @return True if the 'eventCreationTime' field has been set, false otherwise.
      */
    public boolean hasEventCreationTime() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventCreationTime' field.
      * @return This builder.
      */
    public com.dc.kafka.avro.btlnse.Audit.Builder clearEventCreationTime() {
      eventCreationTime = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'inputterList' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getInputterList() {
      return inputterList;
    }


    /**
      * Sets the value of the 'inputterList' field.
      * @param value The value of 'inputterList'.
      * @return This builder.
      */
    public com.dc.kafka.avro.btlnse.Audit.Builder setInputterList(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.inputterList = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'inputterList' field has been set.
      * @return True if the 'inputterList' field has been set, false otherwise.
      */
    public boolean hasInputterList() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'inputterList' field.
      * @return This builder.
      */
    public com.dc.kafka.avro.btlnse.Audit.Builder clearInputterList() {
      inputterList = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public com.dc.kafka.avro.btlnse.Audit.Builder setEventId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.eventId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public com.dc.kafka.avro.btlnse.Audit.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateTimeList' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getDateTimeList() {
      return dateTimeList;
    }


    /**
      * Sets the value of the 'dateTimeList' field.
      * @param value The value of 'dateTimeList'.
      * @return This builder.
      */
    public com.dc.kafka.avro.btlnse.Audit.Builder setDateTimeList(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.dateTimeList = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dateTimeList' field has been set.
      * @return True if the 'dateTimeList' field has been set, false otherwise.
      */
    public boolean hasDateTimeList() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dateTimeList' field.
      * @return This builder.
      */
    public com.dc.kafka.avro.btlnse.Audit.Builder clearDateTimeList() {
      dateTimeList = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Audit build() {
      try {
        Audit record = new Audit();
        record.companyId = fieldSetFlags()[0] ? this.companyId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.eventCreationTime = fieldSetFlags()[1] ? this.eventCreationTime : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.inputterList = fieldSetFlags()[2] ? this.inputterList : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[2]);
        record.eventId = fieldSetFlags()[3] ? this.eventId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.dateTimeList = fieldSetFlags()[4] ? this.dateTimeList : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Audit>
    WRITER$ = (org.apache.avro.io.DatumWriter<Audit>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Audit>
    READER$ = (org.apache.avro.io.DatumReader<Audit>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.companyId);

    out.writeString(this.eventCreationTime);

    long size0 = this.inputterList.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.inputterList) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeString(this.eventId);

    long size1 = this.dateTimeList.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.CharSequence e1: this.dateTimeList) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.companyId = in.readString(this.companyId instanceof Utf8 ? (Utf8)this.companyId : null);

      this.eventCreationTime = in.readString(this.eventCreationTime instanceof Utf8 ? (Utf8)this.eventCreationTime : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.inputterList;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("inputterList").schema());
        this.inputterList = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);

      long size1 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a1 = this.dateTimeList;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("dateTimeList").schema());
        this.dateTimeList = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.companyId = in.readString(this.companyId instanceof Utf8 ? (Utf8)this.companyId : null);
          break;

        case 1:
          this.eventCreationTime = in.readString(this.eventCreationTime instanceof Utf8 ? (Utf8)this.eventCreationTime : null);
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.inputterList;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("inputterList").schema());
            this.inputterList = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 3:
          this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);
          break;

        case 4:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a1 = this.dateTimeList;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("dateTimeList").schema());
            this.dateTimeList = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










